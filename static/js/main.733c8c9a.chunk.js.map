{"version":3,"sources":["components/TasksContainer/TasksContainer.tsx","components/ToDoForm/ToDoForm.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["TasksContainer","props","state","inEditMode","this","tasks","deleteTask","setUpdate","tasksList","map","task","className","key","type","id","toString","value","text","onChange","e","target","changeTask","icon","faTrash","onClick","length","duration","easing","Component","ToDoForm","items","currentItem","onSubmit","preventDefault","newItem","console","log","newItemList","setState","placeholder","Date","now","newList","filter","item","list","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"gWAQqBA,E,kDACjB,WAAYC,GAAuC,IAAD,8BAC9C,cAAMA,IACDC,MAAQ,CACTC,YAAY,GAH8B,E,qDAMxC,IAAD,EACoCC,KAAKH,MAAtCI,EADH,EACGA,MAAOC,EADV,EACUA,WAAYC,EADtB,EACsBA,UAIrBC,EAAYH,EAAMI,KAAI,SAAAC,GACxB,OACI,yBAAKC,UAAU,WAAWC,IAAKF,EAAKE,KAChC,2BAAOC,KAAK,OAAOC,GAAIJ,EAAKE,IAAIG,WAAYC,MAAON,EAAKO,KAAMC,SAAU,SAACC,GAAD,OANjE,SAACA,EAAwCP,GACxDL,EAAUY,EAAEC,OAAOJ,MAAOJ,GAK6DS,CAAWF,EAAGT,EAAKE,QAClG,yBAAKD,UAAU,WACX,kBAAC,IAAD,CAAiBG,GAAG,aAAaQ,KAAMC,IAASC,QAAS,kBAAMlB,EAAWI,EAAKE,aAK/F,OACI,6BACMJ,EAAUiB,QAAU,EAClB,wBAAIX,GAAG,gBAAP,yBAEA,6BACI,kBAAC,IAAD,CAAUY,SAAU,IAAKC,OAAO,eAC3BnB,S,GA7BeoB,aCFvBC,E,kDACjB,WAAY5B,GAAiC,IAAD,8BACxC,cAAMA,IACDC,MAAQ,CACT4B,MAAO,GACPC,YAAa,CACTd,KAAM,GACNL,IAAK,IAN2B,E,qDAUlC,IAAD,SAC0BR,KAAKF,MAA5B4B,EADH,EACGA,MAAOC,EADV,EACUA,YAsCf,OACI,6BACI,0BAAMjB,GAAG,aAAakB,SAvCd,SAACb,GACbA,EAAEc,iBACF,IAAMC,EAAUH,EAEhB,GADAI,QAAQC,IAAIF,GACU,MAAX,OAAPA,QAAO,IAAPA,OAAA,EAAAA,EAASjB,MAAa,CACtB,IAAMoB,EAAW,sBAAOP,GAAP,CAAcI,IAC/B,EAAKI,SAAS,CACVR,MAAOO,EACPN,YAAa,CACTnB,IAAK,EACLK,KAAM,SA8BV,2BAAOJ,KAAK,OAAO0B,YAAY,kBAAkBvB,MAAK,OAAEe,QAAF,IAAEA,OAAF,EAAEA,EAAad,KAAMC,SAzBnE,SAACC,GACjB,EAAKmB,SAAS,CACVP,YAAa,CACTd,KAAME,EAAEC,OAAOJ,MACfJ,IAAK4B,KAAKC,YAsBV,4BAAQ5B,KAAK,UAAb,aAEJ,kBAAC,EAAD,CAAgBR,MAAOyB,EAAOxB,WApBnB,SAACM,GAChB,IAAM8B,EAAUZ,EAAMa,QAAO,SAAAC,GAAI,OAAIA,EAAKhC,MAAQA,KAClD,EAAK0B,SAAS,CACVR,MAAOY,IAEXP,QAAQC,IAAIM,IAe8CnC,UAb5C,SAACU,EAAcL,GAC7B,IAAMiC,EAAOf,EACbe,EAAKpC,KAAI,SAAAmC,GAAI,OAAIA,EAAKhC,MAAQA,EAAMgC,EAAK3B,KAAOA,EAAO,MACvD,EAAKqB,SAAS,CACVR,MAAOe,Y,GA/CejB,aCWvBkB,MAbf,WACE,OACE,yBAAKhC,GAAG,mBACN,4BAAQA,GAAG,UACT,2CAEF,yBAAKH,UAAU,OACb,kBAAC,EAAD,SCCYoC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7B,QAAQ6B,MAAMA,EAAMC,c","file":"static/js/main.733c8c9a.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport { TasksContainerProps } from './TasksContainerProps';\r\nimport './TasksContainer.scss';\r\nimport { TasksContainerStates } from './TasksContainerStates';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTrash } from '@fortawesome/free-solid-svg-icons';\r\nimport FlipMove from 'react-flip-move';\r\n\r\nexport default class TasksContainer extends Component<TasksContainerProps, TasksContainerStates> {\r\n    constructor(props: Readonly<TasksContainerProps>) {\r\n        super(props);\r\n        this.state = {\r\n            inEditMode: false\r\n        }\r\n    }\r\n    render() {\r\n        const { tasks, deleteTask, setUpdate } = this.props;\r\n        const changeTask = (e: React.ChangeEvent<HTMLInputElement>, key: number) => {\r\n            setUpdate(e.target.value, key);\r\n        }\r\n        const tasksList = tasks.map(task => {\r\n            return (\r\n                <div className=\"listItem\" key={task.key}>\r\n                    <input type=\"text\" id={task.key.toString()} value={task.text} onChange={(e) => changeTask(e, task.key)} />\r\n                    <div className=\"actions\">\r\n                        <FontAwesomeIcon id=\"trash-icon\" icon={faTrash} onClick={() => deleteTask(task.key)} />\r\n                    </div>\r\n                </div>\r\n            )\r\n        })\r\n        return (\r\n            <div>\r\n                { tasksList.length <= 0 ?\r\n                    <h3 id=\"no-task-info\">No Tasks Added Yet ! </h3>\r\n                    :\r\n                    <div>\r\n                        <FlipMove duration={300} easing=\"ease-in-out\">\r\n                            {tasksList}\r\n                        </FlipMove>\r\n                    </div>}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React, { Component, ChangeEvent, FormEvent } from 'react'\r\nimport { ToDoFormProps } from './ToDoFormProps';\r\nimport './ToDoForm.scss';\r\nimport { ToDoFormStates } from './ToDoFormStates';\r\nimport TasksContainer from '../TasksContainer/TasksContainer';\r\n\r\nexport default class ToDoForm extends Component<ToDoFormProps, ToDoFormStates> {\r\n    constructor(props: Readonly<ToDoFormProps>) {\r\n        super(props);\r\n        this.state = {\r\n            items: [],\r\n            currentItem: {\r\n                text: '',\r\n                key: 0\r\n            }\r\n        }\r\n    }\r\n    render() {\r\n        const { items, currentItem } = this.state;\r\n        const addTask = (e: FormEvent<HTMLFormElement>) => {\r\n            e.preventDefault();\r\n            const newItem = currentItem;\r\n            console.log(newItem);\r\n            if (newItem?.text !== \"\") {\r\n                const newItemList = [...items, newItem];\r\n                this.setState({\r\n                    items: newItemList,\r\n                    currentItem: {\r\n                        key: 0,\r\n                        text: ''\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        const handleInput = (e: ChangeEvent<HTMLInputElement>) => {\r\n            this.setState({\r\n                currentItem: {\r\n                    text: e.target.value,\r\n                    key: Date.now()\r\n                }\r\n            });\r\n        }\r\n        const deleteTask = (key:number) => {\r\n            const newList = items.filter(item => item.key !== key);\r\n            this.setState({\r\n                items: newList\r\n            });\r\n            console.log(newList);\r\n        }\r\n        const setUpdate = (text: string, key: number) => {\r\n            const list = items;\r\n            list.map(item => item.key === key ? item.text = text : '')\r\n            this.setState({\r\n                items: list\r\n            });\r\n        }\r\n        return (\r\n            <div>\r\n                <form id=\"to-do-form\" onSubmit={addTask}>\r\n                    <input type=\"text\" placeholder=\"Enter Your Task\" value={currentItem?.text} onChange={handleInput} />\r\n                    <button type=\"submit\">Add Task</button>\r\n                </form>\r\n                <TasksContainer tasks={items} deleteTask={deleteTask} setUpdate={setUpdate}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\nimport './App.scss';\nimport ToDoForm from './components/ToDoForm/ToDoForm';\n\nfunction App() {\n  return (\n    <div id=\"to-do-container\">\n      <header id=\"header\">\n        <h1>To-Do List</h1>\n      </header>\n      <div className=\"App\">\n        <ToDoForm />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}